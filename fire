#!/usr/bin/php -q
<?php

/*
 * GLOBAL TODOs
 * ------------
 * FIXME - Fix the indentation in the MVC::controller() and MVC::model() methods
 * 
 */

error_reporting(E_ALL & E_STRICT);

/**
* Master class. Shows the help, contains all the configuration constants and all the static methods.
* 
* @package Fire
* @author Aziz Light
* @link http://bitbucket.org/azizlight/fire
* @link http://github.com/AzizLight/fire
* @copyright Copyright (c) 2010, Aziz Light
* @license http://www.opensource.org/licenses/mit-license.php MIT License
*/
class Fire
{
	/**
	 * The path to the CodeIgniter folder that will serve as model/template to create the new project.
	 */
	const codeigniter_path = '/Users/aziz/Sites/source/CodeIgniter_1.7.2';
	
	/**
	 * If the CodeIgniter folder referenced above is not the
	 * default one (the unchanged CodeIgniter folder you downloaded
	 * from the official site), then default_ci should be set to FALSE.
	 */
	const default_ci = TRUE;
	
	/**
	 * Set to FALSE if you want to set up the class manually and don't want to be asked
	 * questions when you create a new project.
	 */
	const verbose_mode = FALSE;
	
	/*
	|--NON-verbose mode configuration constants-------------------------------
	| Those constant will be used if verbose_mode is set to FALSE and will also
	| be used as default choice if verbose_mode is set to TRUE (default)
	|-------------------------------------------------------------------------
	*/
	/**
	 * If TRUE, the application folder will be moved out of the system folder.
	 */
	const move_application_folder = TRUE;
	
	/**
	 * If TRUE, an assets folder will be created at the application root (at the same
	 * level as the system folder and the index.php file).
	 */
	const create_assets_folder = TRUE;
	
	/**
	 * Name of the assets folder. NOTE - A number of subfolder will also be created, but
	 * this is configurable in the constructor (by initializing the $_assets_subfolders private property).
	 */
	const name_of_assets_folder = 'public';
	/*
	|-------------------------------------------------------------------------
	*/
	
	/**
	 * The name of the application folder. 
	 * Change that constant only if you changed the name of the application folder.
	 */
	const application_folder_name = 'application';
	
	/**
	 * The name of the system folder.
	 */
	const system_folder_name = 'system';
	
	/**
	 * Parent controller that will extend every other controller
	 */
	const parent_controller = 'Controller';
	
	/**
	 * The name of the constructor of the parent Controller.
	 * Can be __construct or Controller for instance.
	 */
	const parent_controller_constructor = 'Controller';
	
	/**
	 * Parent model that will extend every other model
	 */
	const parent_model = 'Model';
	
	/**
	 * The name of the constructor of the parent Model.
	 * Can be __construct or Model for instance.
	 */
	const parent_model_constructor = 'Model';
	
	/**
	 * Model suffix
	 */
	const model_suffix = '_model';
	
// ------------------------------------------------------------------------
	
	/**
	 * This static variable will contain all the controllers the user will
	 * create for each query.
	 *
	 * @access private
	 * @static
	 * @var array
	 */
	private static $_controllers = array();
	
	/**
	 * This static variable will contain all the models the user will
	 * create for each query.
	 *
	 * @access private
	 * @static
	 * @var array
	 */
	private static $_models = array();

	/**
	 * @access private
	 * @static
	 * @var array
	 */
	private static $_views = array();
	
	/**
	 * Array containing the list of subfolders that will
	 * be created in the assets folder
	 *
	 * @access private
	 * @static
	 * @var array
	 */
	protected static $_assets_subfolders = array(
		'cs',
		'js',
		'images',
	);
	
	/**
	 * The list of valid parameters that will tell fire
	 * what it needs to do
	 *
	 * @access private
	 * @static
	 * @var array
	 */
	private static $_valid_cli_params = array(
		'controller',
		'controller+',
		'+controller',
		'model',
		'view',
		'ci',
		'help',
	);
	
// ------------------------------------------------------------------------
	
	/**
	 * The Constructor!
	 *
	 * @access public
	 * @author Aziz Light
	 */
	public function __construct()
	{
		
	} // End of __construct
	
// ------------------------------------------------------------------------
	
	/**
	 * Validate a query. If duplicate arguments were passed to the command line
	 * the validation will fail!
	 *
	 * @todo - rewrite the doc for this method
	 * @access public
	 * @static
	 * @param array $args : Array of arguments. Typically, $argv;
	 * @return void|bool : Throws an Exception if validation fails. Otherwise, return TRUE.
	 * @author Aziz Light
	 */
	public static function init($args)
	{
		$args[1] = trim($args[1]);
		// If the user type 'fire' without any arguments, show some help.
		if (empty($args[1]))
			self::help();
		// First thing to do is to verify that the first parameter is a valid keyword!
		if (!in_array($args[1], self::$_valid_cli_params))
			throw new Exception($args[1] . ' is not a valid type! Type fire help for instructions on how to use this script!');
		
		$next_param = FALSE; // is the next keyword an action/method?
		$param = FALSE; // is the current keyword an action/method?
		$view_file = FALSE; // if the current keyword is an action and this variable is set to true, then a view will be created for that action.
		$last_type = '';
		$last_of_type = 0;

		$max = count($args);
		for ($i = 1; $i < $max; $i++)
		{
			// Check that there isn't two keywords one after the other.
			if (in_array($args[$i - 1], self::$_valid_cli_params) && in_array($args[$i], self::$_valid_cli_params))
			{
				throw new Exception('Duplicate keywords detected!');
			}
			
			if (in_array($args[$i], self::$_valid_cli_params))
			{
				if ($args[$i] == 'controller' || $args[$i] == 'controller+' || $args[$i] == 'model' || $args[$i] == 'view')
				{
					$last_type = $args[$i];
					$param = FALSE;
					$next_param = FALSE;

					if ($args[$i] != 'controller+')
					{
						$view_file = FALSE;
					}

					continue;
				}
				elseif ($args[$i] == 'help')
				{
					Fire::help();
				}
				elseif ($args[$i] == 'ci')
				{
					$fire = new Ci();
					$fire->create_project($args[$i + 1]);
					exit();
				}
			}
			else
			{
				if (substr($args[$i], -1) == ':')
				{
					$next_param = TRUE;
					$args[$i] = rtrim($args[$i], ':');
				}

				if (substr($args[$i], 0, 1) == '+')
				{
					if ($last_type == 'controller' || $last_type == 'controller+')
					{
						$last_type = '+controller';
						$view_file = TRUE;
					}
					$args[$i] = ltrim($args[$i], '+');
				}
			}
			
			if ($param)
			{
				if (substr($args[$i], -1) == '.')
				{
					$next_param = FALSE;
					$args[$i] = rtrim($args[$i], '.');
				}

				if ($last_type == 'controller' || $last_type == 'controller+')
				{
					self::$_controllers[$args[$last_of_type]][] = $args[$i];

					if ($view_file)
					{

						echo $args[$i] . "\n";
						self::$_views[$args[$last_of_type]][] = $args[$i];

						if ($next_param === FALSE)
						{
							$view_file = FALSE;
						}
					}
				}
				elseif ($last_type == 'model')
				{
					self::$_models[$args[$last_of_type]][] = $args[$i];
				}
				elseif ($last_type == 'view')
				{
					self::$_views[$args[$last_of_type]][] = $args[$i];
				}
			}
			elseif ($last_type == 'controller')
			{
				$last_of_type = $i;
				self::$_controllers[$args[$i]] = array();
			}
			elseif ($last_type == 'controller+' || $last_type == '+controller')
			{
				$last_of_type = $i;
				self::$_controllers[$args[$i]] = array();
				self::$_models[Inflector::singularize($args[$i])] = array();
				self::$_views[$args[$i]] = array();
				
				if ($last_type == '+controller')
				{
					$last_type = 'controller';
				}
			}
			elseif ($last_type == 'model')
			{
				$last_of_type = $i;
				self::$_models[$args[$i]] = array();
			}
			elseif ($last_type == 'view')
			{
				$last_of_type = $i;
				self::$_views[$args[$i]] = array();
			}

			if ($next_param === TRUE)
			{
				$param = TRUE;
			}
			else
				$param = FALSE;
		}
		
		self::_create();
		
		return TRUE;
	} // End of init
	
// ------------------------------------------------------------------------
	
	/**
	 * Create the controllers, the methods and the views.
	 * 
	 * @access private
	 * @static
	 * @return void
	 * @author Aziz Light
	 */
	private static function _create()
	{
		// Create the controllers
		foreach (self::$_controllers as $controller => $actions)
		{
			$fire = new MVC('controller', $controller);
			if (!empty($actions))
			{
				// Create the actions
				foreach ($actions as $action)
				{
					$fire->new_action($action);
				}
			}
			$fire->create();
			unset($fire);
		}

		// Create the models
		foreach (self::$_models as $model => $methods)
		{
			$fire = new MVC('model', $model);
			if (!empty($methods))
			{
				foreach ($methods as $method)
				{
					$fire->new_method($method);
				}
			}
			$fire->create();
			unset($fire);
		}

		// Create the views
		foreach (self::$_views as $views_folder => $views)
		{
			$fire = new MVC('view', $views_folder, $views);
			$fire->create();
			unset($fire);
		}

		return;
	} // End of create
	
// ------------------------------------------------------------------------
	
	/**
	 * Display some help and stop the execution
	 *
	 * @access public
	 * @static
	 * @return void
	 * @author Aziz Light
	 */
	public static function help()
	{
		// show some ... help!
		exit();
	} // End of help
	
// ------------------------------------------------------------------------
	
	/**
	 * Display a message. If it's an error message, also terminate
	 * the execution of the script.
	 * NOTE - This method is exactly the same in the Ci class and the MVC class; I might want to do something about that...
	 *
	 * @access protected
	 * @static
	 * @param string $type : The type of the message. Leave empty to send a regular message.
	 * @param string $message : The message.
	 * @return void
	 * @author Aziz Light
	 */
	protected static function _display_message($type = '', $message = '', $continue = FALSE)
	{
		if (empty($message))
		{
			$type = 'error';
			$message = 'You tried to display a message but didn\'t provide the message...';
		}
		
		$_message_type = array(
			'error', 'warning', 'notice',
		);
		
		$_label = '';
		if (in_array($type, $_message_type))
		{
			$_label = strtoupper($type) . ': ';
		}
		
		$_message  = "\n";
		$_message .= $_label . $message;
		$_message .= "\n";
		
		fwrite(STDOUT, $_message);
		unset($_label, $_message, $message);
		
		if ($type == 'error' && $continue === FALSE)
			exit();
		else
			return;
	} // End of _display_message
	
} // End of Fire class

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------

/**
 * Create a base CodeIgniter project.
 *
 * @package Fire
 * @subpackage Ci
 * @author Aziz Light
 * @link http://bitbucket.org/azizlight/fire
 * @link http://github.com/AzizLight/fire
 * @copyright Copyright (c) 2010, Aziz Light
 * @license http://www.opensource.org/licenses/mit-license.php MIT License
 */
class Ci extends Fire
{
	/**
	 * Instance variable that exists for the sole purpose of passing the name
	 * of the created project to the message that the destructor will display
	 * if a project was successfully created.
	 *
	 * @access private
	 * @var string
	 */
	private $_name;
	
	/**
	 * The destructor method will not display a success message unless this variable is true;
	 *
	 * @access private
	 * @var string
	 */
	private $_success;
	
// ------------------------------------------------------------------------
	
	/**
	 * The Constructor!
	 *
	 * @access public
	 * @author Aziz Light
	 */
	public function __construct()
	{
		parent::__construct();
		
		$this->_success = FALSE;
	}
	
// ------------------------------------------------------------------------
	
	/**
	 * El Destructor!
	 *
	 * @access public
	 * @return void
	 * @author Aziz Light
	 */
	public function __destruct()
	{
		if ($this->_success === TRUE)
		{
			$_message = ucfirst($this->_name) . ' project successfully created!';
			self::_display_message('', $_message);
			unset($_message);
		}
	} // End of __destruct
	
// ------------------------------------------------------------------------
	
	/**
	 * Create a new project. Optionally, moves the application folder out of
	 * the system folder and creates the assets folder.
	 *
	 * @access public
	 * @param string $name : The name of the new project.
	 * @param string $destination : Optional. The destination of the new project. If not provided, will be set automatically to the current location.
	 * @return void
	 * @author Aziz Light
	 */
	public function create_project($name = '', $destination = '')
	{
		$name = trim($name);
		$destination = trim($destination);
		if (empty($destination))
		{
			$destination = getcwd() . '/';
		}
		else
		{
			if (substr($destination, - 1) != '/')
				$destination .= '/';
		}
		
		if (!empty($name) && is_dir($destination . $name))
		{
			$_notice = 'There is already a project named ' . $name . ' in this directory! Try Again.';
			self::_display_message('notice', $_notice);
			unset($_notice);
			$name = $this->_get_name($destination);
		}
		elseif (empty($name))
			$name = $this->_get_name($destination);
		$destination .= $name;
		
		/*
		 * TODO - Create the blocks that will let the user remove the user_guide and license.txt.
		 * TODO - Create the blocks that will let the user remove welcome controller + view. Fire also need to send a notice advising to change the default route.
		 */
		
		if ($this->_import_ci($destination))
		{
			// -Verbose-mode-----------------------------------------------------------
			if (self::verbose_mode)
			{
				// -Move-the-application folder--------------------------------------------
				// NOTE - If the application folder is not in the system folder, that would mean one of two things:
				//        - The application_folder_name constant is not the same as the application folder's name.
				//        - You have manually moved the application folder.
				//      - In both cases, the user won't be asked wether or not he wants to move the application
				//        folder out of the system folder.
				if (is_dir($destination . self::system_folder_name . '/' . self::application_folder_name))
				{
					$_default_answer = (self::move_application_folder) ? 'yes' : 'no';
					$_question  = "'Do you want to move the application folder outside of the system folder? [Default: ${_default_answer}]\n[yes/no] ";
					fwrite(STDOUT, $_question);
					
					$_answer = strtolower(trim(fgets(STDIN)));
					
					if ($_answer == 'yes' || $_answer == 'y' || (empty($_answer) && $_default_answer == 'yes'))
					{
						if (!$this->_move_application_folder($destination))
						{
							$_error = 'Unable to move the application folder...';
							self::_display_message('error', $_error, TRUE);
							unset($_error);
						}
					}
					elseif ($_answer != 'no' || $_answer != 'n')
					{
						$i = 0;
						do
						{
							fwrite(STDOUT, "I do not understand...\n$_question");
							$_answer = strtolower(trim(fgets(STDIN)));
							if ($_answer == 'yes' || $_answer == 'y' || (empty($_answer) && $_default_answer == 'yes'))
							{
								if (!$this->_move_application_folder($destination))
								{
									$_error = 'Unable to move the application folder...';
									self::_display_message('error', $_error, TRUE);
									unset($_error);
								}
								$i = 42;
							}
							elseif ($_answer == 'no' || $_answer == 'n')
							{
								$i = 42;
							}
							$i++;
						} while ($i < 3);
					
						if ($i < 42)
						{
							$_warning = 'No understandable answer was provided to the previous question...The choice will be made for you...';
							self::_display_message('warning', $_warning);
							unset($_warning);
						
							if (self::move_application_folder == 'yes')
							{
								if (!$this->_move_application_folder($destination))
								{
									$_error = 'Unable to move the application folder...';
									self::_display_message('error', $_error, TRUE);
									unset($_error);
								}
							}
						}
					}
				}
				unset($_answer, $_question, $_default_answer);
				// ------------------------------------------------------------------------
				
				// -Create-assets-folder---------------------------------------------------
				// NOTE - The assets folder will only be created if it's not already there.
				if (!is_dir($destination . self::name_of_assets_folder))
				{
					$_default_answer = (self::create_assets_folder) ? 'yes' : 'no';
					$_question  = "'Do you want to create an assets folder? [Default: ${_default_answer}\n[yes/no] ";
					fwrite(STDOUT, $_question);
					
					$_answer = strtolower(trim(fgets(STDIN)));
					if ($_answer == 'yes' || $_answer = 'y' || (empty($_answer) && $_default_answer == 'yes'))
					{
						if (!$this->_create_assets_folders($destination))
						{
							$_error = 'Unable to create the assets folder...';
							self::_display_message('error', $_error, TRUE);
							unset($_error);
						}
					}
					elseif ($_answer != 'no' || $_answer != 'n')
					{
						$i = 0;
						do
						{
							fwrite(STDOUT, "I do not understand...\n$_question");
							$_answer = strtolower(trim(fgets(STDIN)));
							if ($_answer == 'yes' || $_answer == 'y' || (empty($_answer) && $_default_answer == 'yes'))
							{
								if (!$this->_create_assets_folders($destination))
								{
									$_error = 'Unable to create the assets folder...';
									self::_display_message('error', $_error, TRUE);
									unset($_error);
								}
								$i = 42;
							}
							elseif ($_answer == 'no' || $_answer == 'n')
							{
								$i = 42;
							}
							$i++;
						} while ($i < 3);
						
						if ($i < 42)
						{
							$_warning = 'No understandable answer was provided to the previous question...The choice will be made for you...';
							self::_display_message('warning', $_warning);
							unset($_warning);
							
							if (self::create_assets_folder == 'yes')
							{
								if (!$this->_create_assets_folders($destination))
								{
									$_error = 'Unable to create the assets folder...';
									self::_display_message('error', $_error, TRUE);
									unset($_error);
								}
							}
						}
					}
					
					unset($_answer, $_question, $_default_answer);
				}
				// ------------------------------------------------------------------------
			} // End of Verbose mode
			else
			{
				// -Non-Verbose-Mode-------------------------------------------------------
				if (self::move_application_folder == 'yes')
				{
					if (is_dir($destination . '/' . self::system_folder_name . '/' . self::application_folder_name))
					{
						if (!$this->_move_application_folder($destination))
						{
							$_error = 'Unable to move the application folder...';
							self::_display_message('error', $_error, TRUE);
							unset($_error);
						}
					}
				}
				
				if (self::create_assets_folder == 'yes')
				{
					if (!is_dir($destination . '/' . self::name_of_assets_folder))
					{
						if (!$this->_create_assets_folders($destination))
						{
							$_error = 'Unable to create the assets folder...';
							self::_display_message('error', $_error, TRUE);
							unset($_error);
						}
					}
				}
			}
			
			$this->_name    = $name;
			$this->_success =  TRUE;
			return;
		}
		else
		{
			$_error = 'Unable to create the CodeIgniter project...';
			self::_display_message('error', $_error);
		}
	} // End of create_project
	
// ------------------------------------------------------------------------
	
	/**
	 * Prompts the user to enter a name for the new project he is
	 * trying to create.
	 * This method will only be called if the user tried to
	 * create a project and did not provide a name.
	 *
	 * @access public
	 * @param string $destination : The destination of the new project. Used to check if a project with the same name already exists.
	 * @return void|string : Returns the name or terminates the execution if no name was retrieved.
	 * @author Aziz Light
	 */
	private function _get_name($destination)
	{
		fwrite(STDOUT, 'Choose a name for your project: ');
		$name = trim(fgets(STDIN));
		
		$i = 0;
		$state = '';
		do
		{
			if (empty($name))
			{
				$_notice = 'You need to specify a name for your project! Try again.';
				self::_display_message('notice', $_notice);
				unset($_notice);
			}
			elseif (is_dir($destination . $name))
			{
				$_notice = 'There is already a project named ' . $name . ' in this directory! Try Again.';
				self::_display_message('notice', $_notice);
				unset($_notice);
				$name = '';
				$state = 'new';
			}
			else
			{
				$i = 42;
				break;
			}
			
			fwrite(STDOUT, 'Choose a ' . $state . ' name for your project: ');
			$name = trim(fgets(STDIN));
			$i++;
		} while ($i < 3);
		
		if ($i < 42)
		{
			$_error = 'You didn\'t specify a name for the new project you are trying to create!';
			self::_display_message('error', $_error);
		}
		return $name;
	} // End of _get_name
	
// ------------------------------------------------------------------------
	
	/**
	 * Copy the CodeIgniter folder to create a new project.
	 * It's a pain in the ass to transfer permissions when copying a file/folder
	 * in php so here is what will happen:
	 *     - All the files will have a permission of 644.
	 *     - All the folders will have a permission of 755.
	 * 
	 * I did not create this method, It's Sina Salek who left it as comment
	 * on php.net {@link http://www.php.net/manual/en/function.copy.php#91256}
	 * and then info ]t[ intalo [.] de modified
	 * it {@link http://www.php.net/manual/en/function.copy.php#93953}
	 * 
	 * @access private
	 * @param string $dest : The destination folder.
	 * @param string $source : The source file/folder.
	 * @param string $folderPermission : The permission that will be given to all folders.
	 * @param string $filePermission  : The permission that will be given to all files.
	 * @return bool
	 * @author Sina Salek
	 */
	private function _import_ci($dest = '', $source = self::codeigniter_path, $folderPermission = 0755, $filePermission = 0644)
	{
		$result = FALSE;
		
		if (is_file($source))
		{
			if (is_dir($dest))
			{
				if ($dest[strlen($dest) - 1] != '/')
				    $__dest = $dest . '/';
				$__dest .= basename($source);
			}
			else
			{
				$__dest = $dest;
			}
			
			$result = copy($source, $__dest);
			chmod($__dest, $filePermission);
		} 
		elseif (is_dir($source))
		{
			if (!is_dir($dest))
			{
				@mkdir($dest, $folderPermission);
				chmod($dest, $folderPermission);
			}
			
			if ($source[strlen($source) - 1] != '/')
				$source = $source . '/';
			if ($dest[strlen($dest) - 1] != '/')
				$dest = $dest . '/';
			
			$result = TRUE;
			$dirHandle = opendir($source);
			while ($file = readdir($dirHandle))
			{
				if ($file != '.' && $file != '..')
				{
					$result = $this->_import_ci($dest . $file, $source . $file, $folderPermission, $filePermission);
				}
			}
			closedir($dirHandle);
		}
		else
		{
			$result = FALSE;
		}
		
		return $result;
	} // End of _import_ci
	
// ------------------------------------------------------------------------
	
	/**
	 * Move the application folder up one level (to the same level as the system folder).
	 *
	 * @access private
	 * @param string $application_path : The path where the new project has been created.
	 * @return bool
	 * @author Aziz Light
	 */
	private function _move_application_folder($project_path)
	{
		if (substr($project_path, - 1) != '/')
			$project_path .= '/';
			
		if (!is_dir($project_path . self::system_folder_name . '/' . self::application_folder_name))
		{
			$_notice  = "The application folder wasn't found in the system folder.\n";
			$_notice .= "- Check that the application_folder_name constant is the same as the application folder's name.\n";
			$_notice .= "- If it's the same, that would probably mean that you manually moved the application folder. In that case, you should set the move_application_folder constant to FALSE.";
			self::_display_message($_notice);
			unset($_notice);
			
			return TRUE;
		}
		
		return (@rename($project_path . self::system_folder_name . '/' . self::application_folder_name, $project_path . self::application_folder_name));
	} // End of _move_application_folder
	
// ------------------------------------------------------------------------
	
	/**
	 * Create the assets folder and subfolders.
	 * If the method fails to create one of the folders,
	 * all the previously created folders will be deleted.
	 *
	 * @access private
	 * @param string $project_path : The path where the new project has been created.
	 * @return bool
	 * @author Aziz Light
	 */
	private function _create_assets_folders($project_path)
	{
		if (substr($project_path, - 1) != '/')
			$project_path .= '/';
		
		if (!@mkdir($project_path . self::name_of_assets_folder, 0755))
		{
			return FALSE;
		}
		
		foreach (self::$_assets_subfolders as $asset)
		{
			if (!@mkdir($project_path . self::name_of_assets_folder . '/' . $asset, 0755))
			{
				// if (!$this->_remove_assets_folder($project_path))
				if (!$this->_recursive_remove_directory($project_path))
				{
					$_error = 'Unable to remove the assets folder...';
					self::_display_message('error', $_error, TRUE);
					unset($_error);
				}
				return FALSE;
			}
		}
		
		return TRUE;
	} // End of _create_assets_folders
	
// ------------------------------------------------------------------------
	
	/**
	 * Remove a folder and all of its contents.
	 *
	 * @access private
	 * @param string $directory : The path to the folder to remove.
	 * @param bool $empty : If TRUE, the directory and subdirectories will be emptied but not removed.
	 * @return bool
	 * @author lixlpixel
	 * @link http://lixlpixel.org/recursive_function/php/recursive_directory_delete/
	 */
	private function _recursive_remove_directory($directory, $empty = FALSE)
	{
		if (substr($directory, -1) == '/')
		{
			$directory = substr($directory, 0, -1);
		}
		if (!file_exists($directory) || !is_dir($directory))
		{
			return FALSE;
		}
		elseif (is_readable($directory))
		{
			$handle = opendir($directory);
			while (FALSE !== ($item = readdir($handle)))
			{
				if ($item != '.' && $item != '..')
				{
					$path = $directory . '/' . $item;
					if (is_dir($path))
					{
						$this->_recursive_remove_directory($path);
					}
					else
					{
						unlink($path);
					}
				}
			}
			closedir($handle);
			if ($empty == FALSE)
			{
				if (!rmdir($directory))
				{
					return FALSE;
				}
			}
		}
		return TRUE;
	} // End of _recursive_remove_directory
	
} // End of Ci class

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------

/**
 * A CodeIgniter CLI tool to easily create models, controllers and views.
 *
 * @package Fire
 * @subpackage MVC
 * @author Aziz Light
 * @link http://bitbucket.org/azizlight/fire
 * @link http://github.com/AzizLight/fire
 * @copyright Copyright (c) 2010, Aziz Light
 * @license http://www.opensource.org/licenses/mit-license.php MIT License
 */
class MVC extends Fire
{
	/**
	 * The type of element you want to create. ie: 'controller', 'model', 'view'.
	 * It can also be 'help'.
	 *
	 * @access private
	 * @var string
	 */
	private $_type;
	
	/**
	 * The name of the the element you want to create
	 * or the name of the help section you want to display.
	 *
	 * @access private
	 * @var string
	 */
	private $_name;
	
	/**
	 * This array will typically contain the views that will be
	 * created in the views folder. Later on, actions and methods
	 * might also be passed to this array.
	 *
	 * @access private
	 * @var array
	 */
	private $_extras;
	
	/**
	 * Array of actions/methods to be added to the controller or model.
	 *
	 * @access private
	 * @var array
	 */
	private $_actions;
	
	/**
	 * Array of mandatory params. This is variable is re-initialized everytime a new
	 * action is created and is destroyed everytime a new controller or model is created.
	 *
	 * @access private
	 * @var array
	 */
	private $_params;
	
	/**
	 * The destructor method will not display a success message unless this variable is true.
	 *
	 * @access private
	 * @var bool
	 */
	private $_success;
	
	/**
	 * This variable is only used with views. It's there so that the destructor
	 * doesn't say that a view folder was created even though the folder was
	 * there before the execution of the script.
	 * 
	 * @access private
	 * @var bool
	 */
	private $_new_views_folder;
	
	/**
	 * The location of the user. This variable will basically tell if the user is
	 * in the application folder or the project root.
	 *
	 * @todo - I'm not yet sure what type this static variable should be; set as string for the time being.
	 * @access private
	 * @static
	 * @var string
	 */
	private static $_location;
	
// ------------------------------------------------------------------------
	
	/**
	 * The Constructor!
	 * If the user is in the right directory,
	 * initialises the type and name instance variables if they are valid.
	 *
	 * @access public
	 * @param string $type : The type of file to create. ie: controller or model.
	 * @param string $name : The name of the file the user wants to create.
	 * @param array $extras : This is typically an array of views. The option to pass actions/methods to the constructor via this parameter may be available later on.
	 * @return void
	 * @author Aziz Light
	 */
	public function __construct($type, $name = '', $extras = array())
	{
		parent::__construct();
		
		$this->_success = FALSE;
		$this->_new_views_folder = FALSE;
		
		if ($type == 'help' || ($this->_check_location() === TRUE && $this->_check_type($type) === TRUE))
		{
			$this->_type = $type;
			$this->_name = $name;
			$this->_extras = $extras;
			$this->_actions = array();
		}
	} // End of __construct
	
// ------------------------------------------------------------------------
	
	/**
	 * El Destructor!
	 * Prints a success message if nothing went wrong.
	 *
	 * @access public
	 * @return void
	 * @author Aziz Light
	 */
	public function __destruct()
	{
		if ($this->_success === TRUE)
		{
			if ($this->_type == 'view')
			{
				if ($this->_new_views_folder)
					$_message = ucfirst($this->_name) . " views folder successfully created!";
				elseif (empty($this->_extras))
					$_message = "The {$this->_name} views folder already exists!";

				foreach ($this->_extras as $view)
				{
					$_message .= "\n" . ucfirst($view) . " view successfully created in the " . ucfirst($this->_name) . " views folder!";
				}
				self::_display_message('', $_message);
				unset($_message);
			}
			else
			{
				$_message = ucfirst($this->_name) . ' ' . ucfirst($this->_type) . ' successfully created!';
				self::_display_message('', $_message);
				unset($_message);
			}
		}
	} // End of __destruct
	
// ------------------------------------------------------------------------
	
	/**
	 * Controller template
	 *
	 * @access private
	 * @param string $name : The name of the controller. Should be plural.
	 * @return void
	 * @author Aziz Light
	 */
	private  function _controller()
	{
		$class_name = ucfirst($this->_name);
		$parent_controller = self::parent_controller;
		$parent_controller_constructor = self::parent_controller_constructor;
		$application_folder_name = self::application_folder_name;
		
$controller = <<<CONTROLLER
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class {$class_name} extends {$parent_controller}
{
	/**
	 * The Constructor!
	 **/
	public function __construct()
	{
		parent::{$parent_controller_constructor}();
	}
CONTROLLER;

		$controller = $this->_add_actions($controller);

$controller .= <<<CONTROLLER
	
} // End of the {$class_name} controller

/* End of file {$this->_name}.php */
/* Location ./{$application_folder_name}/controllers/{$this->_name}.php */
CONTROLLER;
		
		return $controller;
	} // End of _controller
	
// ------------------------------------------------------------------------
	
	/**
	 * Model Template
	 *
	 * @access private
	 * @param string $name : The name of the model without the suffix. Should be singular.
	 * @return void
	 * @author Aziz Light
	 */
	private function _model()
	{
		$class_name = ucfirst($this->_name);
		$parent_model = self::parent_model;
		$parent_model_constructor = self::parent_model_constructor;
		$application_folder_name = self::application_folder_name;
		
$model = <<<MODEL
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class {$class_name} extends {$parent_model}
{
	/**
	 * The Constructor!
	 **/
	public function __construct()
	{
		parent::{$parent_model_constructor}();
	}
MODEL;
		$model  = $this->_add_actions($model);
$model .= <<<MODEL
} // End of the {$class_name}

/* End of file {$this->_name}.php */
/* Location ./{$application_folder_name}/models/{$this->_name}.php */
MODEL;
		
		return $model;
	} // End of _model
	
// ------------------------------------------------------------------------

	/**
	 * Create the views subfolder if it doesn't exist and then create the
	 * view files. Additionally creates an index.html file for restricting
	 * direct access to the views subfolders.
	 *
	 * @access private
	 * @param string $name : The name of the views folder.
	 * @param array $view : The view files to create.
	 * @return bool
	 * @author Aziz Light
	 */
	private function _view($name = '', $views = array())
	{
		$folder = self::$_location . '/views/' . $name . '/';
		
		// If the views folder doesn't exist, try to create it.
		if (!is_dir($folder))
		{
			if(!@mkdir($folder, 0755))
			{
				$_error = 'Unable to create the views folder...';
				self::_display_message($_error, TRUE);
				unset($_error, $folder);
				
				return FALSE;
			}
			$this->_new_views_folder = TRUE;
		}
		else
		{
			$this->_success = TRUE;
			$this->_new_views_folder = FALSE;
			exit();
		}
		
		// Create the index.html file to restrict direct access to the views folder.
		if (!file_exists($folder . 'index.html'))
		{
			if (($fp = @fopen ($folder . 'index.html', 'wb')))
			{
$index_contents = <<<EOT
<html>
<head>
	<title>403 Forbidden</title>
</head>
<body>

<p>Directory access is forbidden.</p>

</body>
</html>
EOT;
				flock($fp, LOCK_EX);
				fwrite($fp, $index_contents);
				flock($fp, LOCK_UN);
				fclose($fp);
			}
		}

		// Create teh view files.
		if (!empty($views))
		{
			foreach ($views as $view)
			{
				if (file_exists($folder . $view . '.php'))
				{
					$_warning = 'The ' . $view . ' view file already exists!';
					self::_display_message('warning', $_warning);
					unset($_warning);

					$i = 0;
					do
					{
						fwrite(STDOUT, "Do you want to overwrite {$folder}{$view}.php ? [Default: no]\n[yes/no] ");
						$_answer = trim(fgets(STDIN));

						if ($_answer == 'no' || $_answer == 'n')
						{
							break;
						}
						elseif ($_answer == 'yes' || $_answer == 'y' || empty($_answer))
						{
							$i = 42;
						}
						else
						{
							fwrite(STDOUT, "I don't understand...\n");
							$i++;
						}
					} while ($i < 3);
					unset($_answer);

				}
				else
				{
					$i = 42;
				}

				if ($i > 3)
				{
					if (($fp = @fopen ($folder . $view . '.php', 'wb')))
					{
						fclose($fp);
					}
					else
					{
						$_error = 'Unable to create the ' . $view . ' view...';
						self::_display_message('error', $_error, TRUE);
					}
				}
			}
		}

		$this->_success = TRUE;
		return TRUE;
	}

// ------------------------------------------------------------------------

	/**
	 * Create a new action.
	 *
	 * @access public
	 * @param string $name : The name of the action.
	 * @return string : The action.
	 * @author Aziz Light
	 */
	public function new_action($name)
	{
		if (empty($name))
		{
			fwrite(STDOUT, 'Please enter the name of the action you want to create: ');
			$name = fgets(STDIN);
			$name = trim($name);
			if (empty($name))
			{
				$_error = 'You did not provide a name for the action you want to create!';
				self::_display_message('error', $_error);
			}
		}

		$_access = (substr($name, 0, 1) == '_') ? 'private' : 'public';

$_action = <<<ACTION
// ------------------------------------------------------------------------
	
	{$_access} function {$name}()
	{

	} // End of {$name}
	
ACTION;

		$this->_actions[] = $_action;

		return TRUE;
	} // End of new_action

// ------------------------------------------------------------------------

	/**
	 * Alias of the new_action method.
	 * Models don't have actions they have methods.
	 *
	 * @see MVC::new_action()
	 * @access public
	 * @param string $name : The name of the action.
	 * @return string : The action.
	 * @author Aziz Light
	 */
	public function new_method($name)
	{
		return $this->new_action($name);
	}

// ------------------------------------------------------------------------
	
	/**
	 * Creates a new file in the project.
	 *
	 * @access public
	 * @return void
	 * @author Aziz Light
	 */
	public function create()
	{
		if (empty($this->_name))
		{
			$this->_name = $this->_get_name();
			if (empty($this->_name))
			{
				$_error  = 'You didn\'t specify a name for the ' . $this->_type;
				$_error .= ($this->_type == 'view') ? 's folder': '';
				$_error .= ' you want to create...';
				self::_display_message('error', $_error);
			}
		}

		if ($this->_type != 'view')
		{
			$config['type'    ] = $this->_type;
			$config['filename'] = $this->_name;
			$config['template'] = $this->{'_' . $config['type']}();
		}

		switch ($this->_type)
		{
			// CHANGED - Removed the default case. Put it back it there is error poping out...there won't (shouldn't) be any!
			case 'controller':
				$this->_make($config);
				break;
			case 'model':
				$config['filename'] = $config['filename'] . self::model_suffix;
				$this->_make($config);
				break;
			case 'view':
				$this->_view($this->_name, $this->_extras);
				break;
		}
	} // End of create
		
// ------------------------------------------------------------------------
	
	/**
	 * Add a parameter to a controller's action or a model's medthod
	 *
	 * @access public
	 * @param string $name : The name of the parameter (the name of the variable)
	 * @return bool
	 * @author Aziz Light
	 */
	public function new_param($name)
	{
		
	} // End of new_param
	
// ------------------------------------------------------------------------
	
	/**
	 * Check that the user is in the application folder.
	 *
	 * @access private
	 * @return bool|void
	 * @author Aziz Light
	 */
	private function _check_location()
	{
		$location = FolderScanner::check_location(self::application_folder_name, self::system_folder_name);
		if ($location === FALSE)
		{
			$_error = "No CodeIgniter project detected at your location.\nYou must either be in the root of a CodeIgniter project or in the application folder of a project!";
			self::_display_message('error', $_error);
		}
		self::$_location = $location;
		
		return TRUE;
	} // End of _check_location
	
// ------------------------------------------------------------------------
	
	/**
	 * Check that a type is valid.
	 *
	 * @access private
	 * @param string $type
	 * @return bool|void
	 * @author Aziz Light
	 */
	private function _check_type($type = '')
	{
		$_types = array(
			'controller', 'model', 'view',
		);
		
		if (in_array(strtolower($type), $_types))
		{
			return TRUE;
		}
		else
		{
			$_error = 'You specified an unknown type!!';
			self::_display_message('error', $_error);
		}
	} // End of _check_type
	
// ------------------------------------------------------------------------
	
	/**
	 * If the user did not provide a name as argument, ask to provide a name.
	 *
	 * @access private
	 * @return string : The name provided by the user.
	 * @author Aziz Light
	 */
	private function _get_name()
	{
		$message  = 'Please enter the name of the ' . $this->_type;
		$message .= ($this->type == 'view') ? 's folder': '';
		$message .= ': ';
		fwrite(STDOUT, $message);
		return trim(fgets(STDIN));
	} // End of _get_name
	
// ------------------------------------------------------------------------
	
	/**
	 * Creates a controller or a model and terminates the execution of the script.
	 *
	 * @access private
	 * @param array $config : Contains the type of file (controller or model), its name and its contents.
	 * @return void
	 * @author Aziz Light
	 */
	private function _make($config)
	{
		$file = self::$_location . '/' . $config['type'] . 's/' . $config['filename'] . '.php';
		
		if (file_exists($file))
		{
			$_warning = "${file} already exists!!";
			self::_display_message('warning', $_warning);
			unset($_warning);
			
			$i = 0;
			do {
				fwrite(STDOUT, "Do you want to overwrite ${file} ? [Default: yes]\n[yes/no] ");
				$_answer = trim(fgets(STDIN));
				if ($_answer == 'no' || $_answer == 'n')
				{
					break;
				}
				elseif ($_answer == 'yes' || $_answer == 'y' || empty($_answer))
				{
					$i = 42;
				}
				else
				{
					fwrite(STDOUT, "I don't understand...\n");
					$i++;
				}
				
			} while ($i < 3);
			unset($_answer);
		}
		else
		{
			$i = 42;
		}
		
		if ($i > 3)
		{
			if (($fp = @fopen ($file, 'wb'))) // NOTE - Here I added a set of parenthesis to stop getting the "Assignment in condition" warning.
			{
				flock($fp, LOCK_EX);
				fwrite($fp, $config['template']);
				flock($fp, LOCK_UN);
				fclose($fp);
				
				$this->_success = TRUE;
				return;
			}
			else
			{
				$_error = 'Unable to create the ' . ucfirst($config['filename']) . ' ' . $config['type'] . '...';
				self::_display_message('error', $_error);
			}
		}
	} // End of _make
	
// ------------------------------------------------------------------------
	
	/**
	 * Adds actions to the template.
	 *
	 * @access private
	 * @param string $template : The template's "head". Take a look at the controller template to see where the _add_actions() method is called.
	 * @return void|string : Returns the template with the added actions (if there is any).
	 * @author Aziz Light
	 */
	private function _add_actions($template = NULL)
	{
		if (empty($template))
		{
			$_error = 'You need to pass a template as parameter to add actions to it...';
			self::_display_message('error', $_error);
		}
		elseif (empty($this->_actions))
		{
			return $template;
		}
		else
		{
			foreach ($this->_actions as $_action)
			{
				$template .= $_action;
			}
			
			return $template;
		}
	} // End of _add_actions
	
} // End of MVC class

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------

/**
 * A folder scanner.
 *
 * @package Fire
 * @subpackage FolderScanner
 * @author Aziz Light
 * @link http://bitbucket.org/azizlight/fire
 * @link http://github.com/AzizLight/fire
 * @copyright Copyright (c) 2010, Aziz Light
 * @license http://www.opensource.org/licenses/mit-license.php MIT License
 */
class FolderScanner
{
	/**
	 * Get the current location. Returns the path of the current location
	 * and the breadcrumbs trail to that location.
	 *
	 * @access public
	 * @static
	 * @return object
	 * @author Aziz Light
	 */
	public static function get_location()
	{
		$location = new stdClass();
		$location->path = getcwd();
		$location->dirs = explode('/', $location->path);
		$location->dirs[0] = '/';
		
		return $location;
	} // End of get_location
	
// ------------------------------------------------------------------------
	
	/**
	 * List the files and folders that are in a given directory (by default the current location)
	 *
	 * @access public
	 * @static
	 * @param string $dir : The directory to scan.
	 * @return array : The list of files and folders in an array.
	 * @author Aziz Light
	 */
	public static function ls($dir = '')
	{
		if (empty($dir))
			$dir = getcwd();
		
		$handle = opendir($dir);
		$folders = array();
		while (FALSE !== ($f = readdir($handle)))
		{
			if ($f != '.' && $f != '..')
				$folders[] = $f;
		}
		closedir($handle);
		
		return $folders;
	} // End of ls
	
// ------------------------------------------------------------------------
	
	/**
	 * Check that the user is either in the root of a CodeIgniter project or in
	 * the application folder of a CodeIgniter project and returns the path to the
	 * application folder.
	 *
	 * @access public
	 * @static
	 * @return bool|string : Returns the path to the application folder or FALSE if it wasn't found.
	 * @author Aziz Light
	 */
	public static function check_location($application_folder = 'application', $system_folder = 'system')
	{
		$location = self::get_location();
		
		if (!in_array($application_folder, $location->dirs))
		{
			$folders = self::ls();
			if (!in_array($application_folder, $folders))
			{
				if (!in_array($system_folder, $folders))
					return FALSE;
				
				$folders = self::ls($system_folder);
				if (!in_array($application_folder, $folders))
					return FALSE;
				
				return $location->path . '/' . $system_folder . '/' . $application_folder;
			}
			
			return $location->path . '/' . $application_folder;
		}
		
		return $location->path;
	} // End of check_location
} // End of FolderScanner

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------

/**
* Inflector for pluralize and singularize English nouns.
* 
* This Inflector is a port of Ruby on Rails Inflector.
* 
* It can be really helpful for developers that want to
* create frameworks based on naming conventions rather than
* configurations.
* 
* It was ported to PHP for the Akelos Framework, a
* multilingual Ruby on Rails like framework for PHP that will
* be launched soon.
* 
* Note from Aziz Light:
*  I modified this class a bit, I actually removed all of its
*  methods except singularize. I kept the method in the Inflector
*  class because in the future I might add back some other methods to it.
* 
* @author Bermi Ferrer Martinez <bermi akelos com>
* @copyright Copyright (c) 2002-2006, Akelos Media, S.L. http://www.akelos.org
* @license GNU Lesser General Public License <http://www.gnu.org/copyleft/lesser.html>
* @since 0.1
* @version $Revision 0.1 $
*/
class Inflector
{	
	/**
	* Singularizes English nouns.
	* 
	* @access public
	* @static
	* @param string $word : English noun to singularize
	* @return string : Singular noun.
	*/
	public static function singularize($word)
	{
		$singular = array(
			'/(quiz)zes$/i' => '\\1',
			'/(matr)ices$/i' => '\\1ix',
			'/(vert|ind)ices$/i' => '\\1ex',
			'/^(ox)en/i' => '\\1',
			'/(alias|status)es$/i' => '\\1',
			'/([octop|vir])i$/i' => '\\1us',
			'/(cris|ax|test)es$/i' => '\\1is',
			'/(shoe)s$/i' => '\\1',
			'/(o)es$/i' => '\\1',
			'/(bus)es$/i' => '\\1',
			'/([m|l])ice$/i' => '\\1ouse',
			'/(x|ch|ss|sh)es$/i' => '\\1',
			'/(m)ovies$/i' => '\\1ovie',
			'/(s)eries$/i' => '\\1eries',
			'/([^aeiouy]|qu)ies$/i' => '\\1y',
			'/([lr])ves$/i' => '\\1f',
			'/(tive)s$/i' => '\\1',
			'/(hive)s$/i' => '\\1',
			'/([^f])ves$/i' => '\\1fe',
			'/(^analy)ses$/i' => '\\1sis',
			'/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i' => '\\1\\2sis',
			'/([ti])a$/i' => '\\1um',
			'/(n)ews$/i' => '\\1ews',
			'/s$/i' => '',
		);
		
		$uncountable = array('equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep');
		
		$irregular = array(
			'person' => 'people',
			'man' => 'men',
			'child' => 'children',
			'sex' => 'sexes',
			'move' => 'moves'
		);
		
		$lowercased_word = strtolower($word);
		foreach ($uncountable as $_uncountable)
		{
			if (substr($lowercased_word, (-1 * strlen($_uncountable))) == $_uncountable)
			{
				return $word;
			}
		}
		
		foreach ($irregular as $_plural => $_singular)
		{
			if (preg_match('/(' . $_singular . ')$/i', $word, $arr))
			{
				return preg_replace('/(' . $_singular . ')$/i', substr($arr[0], 0, 1) . substr($_plural, 1), $word);
			}
		}
		
		foreach ($singular as $rule => $replacement)
		{
			if (preg_match($rule, $word))
			{
				return preg_replace($rule, $replacement, $word);
			}
		}
		return $word;
	} // End of singularize
	
} // End of Inflector

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------

// -Query-Validation-------------------------------------------------------
try {
	Fire::init($argv);
} catch (Exception $e) {
	exit('ERROR: ' . $e->getMessage() . "\n");
}
// ------------------------------------------------------------------------